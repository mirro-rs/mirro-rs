# https://github.com/SpectralOps/rust-ci-release-template
name: Release
on:
  # schedule:
  # - cron: '0 0 * * *' # midnight UTC

  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
    ## - release

env:
  BIN_NAME: mirro-rs
  PROJECT_NAME: mirro-rs
  REPO_NAME: rtkay123/mirro-rs

jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [x86_64-linux, x86_64-macos, x86_64-windows, aarch64-linux] #, x86_64-win-gnu, win32-msvc
        include:
        - build: x86_64-linux
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
        - build: x86_64-macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          cross: false
        - build: x86_64-windows
          os: windows-2019
          rust: stable
          target: x86_64-pc-windows-msvc
          cross: false
        - build: aarch64-linux
          os: ubuntu-20.04
          rust: stable
          target: aarch64-unknown-linux-gnu
          cross: true

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: test
          args: --release --all-features --locked --target ${{ matrix.target }}

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --all-features --locked --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' || matrix.build == 'x86_64-macos'
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"

      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi

      - uses: actions/upload-artifact@v3.1.3
        with:
          name: bins-${{ matrix.build }}
          path: dist

  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: actions/download-artifact@v3
        # with:
        #   path: dist
      # - run: ls -al ./dist
      - run: ls -al bins-*

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          for dir in bins-* ; do
              platform=${dir#"bins-"}
              unset exe
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$TAG-$platform
              mkdir tmp/$pkgname
              # cp LICENSE README.md tmp/$pkgname
              cp LICENSE-MIT LICENSE-APACHE tmp/$pkgname
              cp -r crates/mirro-rs/completions tmp/$pkgname
              cp -r crates/mirro-rs/man tmp/$pkgname
              cp -r examples tmp/$pkgname
              cp -r systemd tmp/$pkgname
              mv bins-$platform/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe

              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"

      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - run: cargo publish -p ${BIN_NAME} --token ${CRATES_TOKEN}
        env:
          CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}

  changelog:
    runs-on: ubuntu-latest
    needs: [publish]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}
          useGitmojis: false

      - name: Create Release
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changes }}
          token: ${{ github.token }}

      - name: Commit CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: master
          commit_message: 'docs: update CHANGELOG.md for ${{ github.ref_name }}'
          file_pattern: CHANGELOG.md
